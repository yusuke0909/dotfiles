#user設定は別ファイルからincludeするように変更
#[user]
#  name = oasis0909
#  email =  yusuke.liveforever@gmail.com
[include]
  path = .gitconfig.user
[color]
  # colorの設定(以下のコマンドは自動で色つける)
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
[push]
  default = tracking       # defaultのpush先はtrackingしているリポジトリ
[core]
  excludesfile = ~/.gitignore  # globalな.gitignoreの指定
  autocrlf = input                 # CRLFを自動変換
  editor = vim
  quotepath = false
  pager = git-split-diffs --color | less -RFX
  # https://github.com/banga/git-split-diffs 
[split-diffs]
  theme-name = dark
[merge]
  tool = vimdiff
  ff = false
[branch]
  autosetuprebase = always
[pull]
  rebase = true
[alias]
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort | less
  s    = status
  st   = status
  ss   = status -s
  sh   = show
  so   = remote show origin
  info = remote show origin
  su   = submodule update
  # ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >> .gitignore
  # pull/push/fetch
  ft  = fetch
  ftp = fetch --prune
  up  = pull --rebase       # pull rebase
  po  = push origin         # push origin
  pof = push -f origin      # force
  pu  = push -u origin      # push origin and set upstream
  # rebase
  rbm = rebase --merge master       # masterへのrebaseはよく使うのでalias
  rbd = rebase --merge develop
  rbc = rebase --continue
  rba = rebase --abort
  rbi = rebase -i
  rbi1 = rebase -i HEAD^
  rbi2 = rebase -i HEAD^^
  rbi3 = rebase -i HEAD^^^
  rbi4 = rebase -i HEAD^^^^
  rbi5 = rebase -i HEAD^^^^^
  # merge
  mn  = merge --no-ff
  # comit
  ad  = add
  c   = commit
  ci  = commit -a           # modifiedなファイルを全てstageへ
  cam = commit -a --amend   # 直前のcommitを修正
  # checkout/switch
  co  = checkout
  cb  = checkout -b         # branch切ってcheckoutする
  ct  = checkout --track    # remoteのbranchを追跡
  cm  = checkout master
  cd  = checkout develop
  sw  = switch
  swc = switch -c
  # restore
  rs  = restore
  rss = restore --staged
  # branch関連
  br  = branch
  ba  = branch -a           # originも含めた全てのbranchを表示
  bm  = branch --merged     # merge済みのbranchを表示
  bn  = branch --no-merged  # mergeしてないbranchを表示
  bo  = branch -r           # remote branchを表示
  # log関連
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  wc  = whatchanged         # logに変更されたファイルも一緒に出す
  ls  = log --stat          # logに変更されたファイルも一緒に出す
  lp  = log -p              # diffも一緒に出す
  la  = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr  = log origin          # originのlog
  ll = log --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  # log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-all = log --graph --date=short --pretty='%C(yellow)%h%Creset %C(cyan bold)%d%Creset %s %Cgreen[%cd]%Creset' --decorate --all
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  # reset
  r    = reset HEAD
  r1   = reset HEAD~
  r2   = reset HEAD~~
  r3   = reset HEAD~~~
  r4   = reset HEAD~~~~
  r5   = reset HEAD~~~~~
  rsh  = reset --soft HEAD
  rsh1 = reset --soft HEAD~
  rsh2 = reset --soft HEAD~~
  rsh3 = reset --soft HEAD~~~
  rsh4 = reset --soft HEAD~~~~
  rsh5 = reset --soft HEAD~~~~~
  rhh  = reset --hard HEAD       # 取り返しのつかないことをしてしまった……!
  rhh1 = reset --hard HEAD~
  rhh2 = reset --hard HEAD~~
  rhh3 = reset --hard HEAD~~~
  rhh4 = reset --hard HEAD~~~~
  rhh5 = reset --hard HEAD~~~~~
  # rm関連
  rm = rm --cached           #commit情報削除:ファイルそのものは残す
  rmd = rm -r --cached       #Directoryごとcommit情報削除:ファイルそのものは残す
  # diff関連
  di = diff
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # edit関連
  # modified or untrackedなファイルを編集する
  edit = "!f() { git status -s | cut -b 4- | grep -v '\\/$' | uniq ; }; vim `f`"
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  delete-unmerged =  "!f() { git ls-files --deleted | cut -f2 | sort -u ; }; git rm `f`"
  # 指定したコミットで変更されたファイルを編集する
  modified = "!f() { git diff $1..$1\\^ --name-only | xargs sh -c 'vim "$@" < /dev/tty' - ;}; f"
  # cherr -vで出てくる;commitから#1234なチケット番号を切り出す
  cherry-ticket-numbers = "!f() { git cherry -v "$@" | cut -b 44- | awk 'match($0, /#[0-9]+/) {print substr($0, RSTART, RLENGTH)}' | sort -u ;}; f"
  # cherr -vに含まれるチケットを列挙する
  cherry-tickets = "!f() { git cherry -v "$@" | cut -b 44- | awk 'match($0, /#[0-9]+/) {print substr($0, RSTART+1, RLENGTH-1)}' | sort -u | xargs git issue --oneline  ;}; f"
  # colorized cheery -v
  cch= "!f() { git cherry -v "$@" | awk '{ if($1 == \"+\"){ color = \"green\" } if($1 == \"-\"){ color = \"red\" } cmd = \"git show --date=short --no-notes --pretty=format:\\047%C\" color $1 \" %h %Cgreen%cd %Cblue%cn%x09%Creset%s\\047 --summary \" $2; cmd | getline t; close(cmd); print t }' ;}; f"

  # grep関連
  gr = grep
  gn = grep -n
  sm = submodule
  smupdate = submodule foreach "git checkout master; git pull origin master"
  # stash関連(stashもう使わないのでコメントあうと)
  # sl = stash list
  # sp = stash pop
  # ss = stash save

  iss = issue # my extended command

  # git-風呂関連
  ff  = flow feature
  ffl = flow feature list
  ffs = flow feature start
  fff = flow feature finish
  ffc = flow feature checkout
  ffp = flow feature publish
  fr = flow release
  fh  = flow hotfix
  fhl = flow hotfix list
  fhs = flow hotfix start
  fhf = flow hotfix finish
  fhp = flow hotfix publish
  fs  = flow support

  fizzbuzz = "!f() { seq "$@" | awk '$0=NR%15?NR%5?NR%3?$0:\"Fizz\":\"Buzz\":\"FizzBuzz\"' ;}; f"

[http]
  sslVerify = false


# git-browse-remote
# http://subtech.g.hatena.ne.jp/motemen/20120917/1347889804
 [web]
    browser = google-chrome
[browse-remote "github.com"]
    top = https://{host}/{path}
    ref = https://{host}/{path}/tree/{short_ref}
    rev = https://{host}/{path}/commit/{commit}
[browse-remote "github.dev.cybozu.co.jp"]
    top = https://{host}/{path}
    ref = https://{host}/{path}/tree/{short_ref}
    rev = https://{host}/{path}/commit/{commit}
[browse-remote "git.dev.cybozu.co.jp"]
    top = http://{host}/graph/{path[1]}
    ref = http://{host}/changelog/~br={short_ref}/{path[1]}
    rev = http://{host}/changelog/{path[1]}?cs={commit}
[browse-remote "review.dev.cybozu.co.jp"]
    top = http://{host}/graph/{path[1]}
    ref = http://{host}/changelog/~br={short_ref}/{path[1]}
    rev = http://{host}/changelog/{path[1]}?cs={commit}

[tig "bind"]
  generic = g move-first-line
  generic = G move-last-line
  generic = ^F move-page-down
  generic = ^B move-page-up

[ghq]
  root = ~/.ghq

[init]
  templatedir = ~/.git-templates/secrets

[secrets]
  providers = git secrets --aws-provider
  patterns = (A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
  patterns = (\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\"|')?\\s*(:|=>|=)\\s*(\"|')?[A-Za-z0-9/\\+=]{40}(\"|')?
  patterns = (\"|')?(AWS|aws|Aws)?_?(ACCOUNT|account|Account)_?(ID|id|Id)?(\"|')?\\s*(:|=>|=)\\s*(\"|')?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}(\"|')?
  allowed = AKIAIOSFODNN7EXAMPLE
  allowed = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
[safe]
	directory = /opt/homebrew
